#+TITLE: 5D-GAI Intensive Course Resources
#+AUTHOR: Jason Walsh
#+EMAIL: j@wal.sh
#+DATE: March 30, 2025

* 5-Day Gen AI Intensive Course

#+begin_html
<p>
  <a href="https://python.org"><img src="https://img.shields.io/badge/python-3.11-blue.svg" alt="Python Version"></a>
  <a href="https://python-poetry.org/"><img src="https://img.shields.io/badge/poetry-managed-blueviolet" alt="Poetry"></a>
  <a href="LICENSE"><img src="https://img.shields.io/badge/License-MIT-yellow.svg" alt="License: MIT"></a>
</p>
#+end_html

** Course Overview

Welcome to the Google's 5-Day Generative AI Intensive course companion repository! This toolkit helps you:

- üöÄ Hit the ground running with pre-configured environments
- üîå Connect to Google AI Studio APIs quickly with minimal setup
- üìä Focus on learning instead of debugging environment issues
- üìù Keep your notes organized by course day
- üîç Explore bonus examples beyond what's covered in the course

** What You'll Learn in the Course

- *Day 1*: Foundations of Generative AI and Gemini models
- *Day 2*: Prompt engineering techniques and best practices
- *Day 3*: Building with Gemini API and fine-tuning models
- *Day 4*: Multimodal applications and responsible AI
- *Day 5*: Production deployment and advanced use cases

** Quick Start Guide

1. *Setup your environment*:
   #+begin_src sh
   # Using the setup script (recommended)
   ./setup.sh
   
   # Or manually with Poetry
   poetry install
   poetry shell
   #+end_src

2. *Configure your API keys*:
   Edit the ~.env~ file to add your API keys:
   #+begin_src sh
   AI_STUDIO_API_KEY="your-key-here"
   KAGGLE_USERNAME="your-username"
   KAGGLE_KEY="your-key"
   # Optional keys for additional exercises
   OPENAI_API_KEY=""
   ANTHROPIC_API_KEY=""
   #+end_src

3. *Start Jupyter*:
   #+begin_src sh
   # Using local Python
   jupyter notebook
   
   # Or using Docker
   docker-compose up notebook
   #+end_src

4. *Test your API connectivity*:
   #+begin_src sh
   # Quick validation of your Gemini API setup
   make api-test
   #+end_src

** Repository Tools & Features

- *Gemini API Client*: Ready-to-use Python interface to Google's Gemini models
- *Structured Notebooks*: Organized by course day for easy following
- *Resource Collection*: Papers, references, and supplementary materials
- *Docker Integration*: Containerized environment to avoid compatibility issues
- *Automated Testing*: Verify API connectivity with a single command

** Core Features Demonstrated

- Text generation with Gemini
- Chat conversations and context management
- Prompt engineering techniques
- System instructions and parameter tuning
- Multimodal inputs (coming in day 4)
- RAG implementation examples

** Using the Gemini Client

Our simplified client makes it easy to interact with Gemini models:

#+begin_src python
from src.gemini_client import GeminiClient

# Initialize with API key from .env file
client = GeminiClient()

# Simple text generation
response = client.generate_content(
    "Explain the concept of attention in transformer models."
)
print(client.extract_text(response))

# Chat conversation
messages = [
    {"role": "user", "content": "What are three applications of generative AI?"},
    {"role": "model", "content": "1. Content creation\n2. Code generation\n3. Data augmentation"},
    {"role": "user", "content": "Elaborate on code generation use cases."}
]
chat_response = client.chat(messages)
print(client.extract_text(chat_response))
#+end_src

** Course Day-by-Day Navigation

- ~notebooks/day1/~ - Foundation concepts and initial exercises
- ~notebooks/day2/~ - Prompt engineering deep dives
- ~notebooks/day3/~ - Building with the API
- ~notebooks/day4/~ - Multimodal applications
- ~notebooks/day5/~ - Advanced techniques and production deployment

** Get Help & Community

- Join the course Discord for live discussions
- Check the [[file:examples/][examples/]] directory for additional code samples 
- For contributors: see [[file:DEVELOPMENT.org][Development Guide]]
- Submit issues if you find bugs or have enhancement ideas

** Helpful Commands

| Command            | Description                              |
|--------------------+------------------------------------------|
| ~make setup~       | Setup Python environment with Poetry     |
| ~make dev~         | Start Poetry shell for development       |
| ~make api-test~    | Test API connectivity with Gemini        |
| ~make help~        | Show all available make commands         |

** Course Resources

- Official Course Slides: See ~resources/~ directory
- Google AI Studio: https://makersuite.google.com/
- Gemini API Documentation: https://ai.google.dev/
- Kaggle Competitions: https://kaggle.com/

** License

This project is licensed under the MIT License - see the LICENSE file for details.