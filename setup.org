#+TITLE: 5-Day Gen AI Intensive Setup Guide
#+AUTHOR: Jason Walsh
#+EMAIL: j@wal.sh
#+DATE: March 30, 2025
#+PROPERTY: header-args:sh :results output :exports both

* 5-Day Gen AI Intensive Setup
:PROPERTIES:
:VISIBILITY: all
:END:

This document provides a literate programming approach to setting up the environment for the 5-Day Gen AI Intensive course. It covers all requirements for the five days, including:

- Python environment setup with Poetry
- API configuration for Gemini and other providers
- Hy programming language setup
- Emacs configuration for Org-mode and restclient
- Directory structure creation

** Core Environment Setup

The main setup script contains the essential commands to prepare your environment:

#+begin_src sh :tangle setup.sh :shebang #!/bin/bash
# 5-Day Gen AI Intensive - Environment Setup Script
set -euo pipefail

echo "🚀 Setting up 5-Day Gen AI Intensive environment..."

# Check for Python 3.11+
python_version=$(python3 --version 2>&1 | awk '{print $2}')
python_major=$(echo $python_version | cut -d. -f1)
python_minor=$(echo $python_version | cut -d. -f2)

if [ "$python_major" -lt 3 ] || [ "$python_major" -eq 3 -a "$python_minor" -lt 11 ]; then
  echo "❌ Error: Python 3.11+ is required (found $python_version)"
  echo "Please install Python 3.11 or higher before continuing."
  exit 1
fi

echo "✅ Python $python_version detected"

# Check for Poetry
if ! command -v poetry &> /dev/null; then
  echo "🔄 Poetry not found. Installing..."
  curl -sSL https://install.python-poetry.org | python3 -
  echo "✅ Poetry installed"
else
  echo "✅ Poetry already installed"
fi

# Create directory structure
echo "🔄 Creating directory structure..."
mkdir -p notebooks/{day1,day2,day3,day4,day5}
mkdir -p papers/{day1,day2,day3,day4,day5}
mkdir -p resources data config
echo "✅ Directory structure created"

# Install dependencies
echo "🔄 Installing dependencies with Poetry..."
poetry install
echo "✅ Dependencies installed"

# Create .env template if it doesn't exist
if [ ! -f .env ]; then
  echo "🔄 Creating .env template..."
  cat > .env << EOF
# API Keys
AI_STUDIO_API_KEY=""
KAGGLE_USERNAME=""
KAGGLE_KEY=""

# Optional keys for additional exercises
OPENAI_API_KEY=""
ANTHROPIC_API_KEY=""
EOF
  echo "✅ Created .env template"
  echo "⚠️  Please edit .env file to add your API keys"
else
  echo "✅ .env file already exists"
fi

# Set up Hy if available
if poetry run python -c "import hy" &> /dev/null; then
  echo "✅ Hy is installed"
  
  # Create a simple test to verify Hy is working
  echo "🔄 Testing Hy installation..."
  poetry run python -c "import hy; hy.eval('(print \"Hello from Hy!\")')" && echo "✅ Hy is working correctly" || echo "❌ Hy test failed"
else
  echo "❌ Hy installation not found - please check poetry installation"
fi

# Test API connectivity
echo "🔄 Testing API configuration..."
if [ -f .env ] && grep -q "AI_STUDIO_API_KEY" .env && ! grep -q 'AI_STUDIO_API_KEY=""' .env; then
  echo "🔄 Running API test..."
  poetry run python -c "
from src.gemini_client import GeminiClient
import sys
try:
    client = GeminiClient()
    response = client.generate_content('Hello, Gemini! Respond with a short greeting.')
    print(f'✅ API Response: {client.extract_text(response)}')
    print(f'✅ API Test successful!')
except Exception as e:
    print(f'❌ API Test failed: {e}', file=sys.stderr)
    sys.exit(1)
  " || echo "⚠️  API test failed. Make sure your API keys are set up correctly in .env"
else
  echo "⚠️  API key not configured - skipping API test"
  echo "   Please edit .env file to add your API_STUDIO_API_KEY"
fi

echo ""
echo "🎉 Setup complete! Next steps:"
echo "1. Edit .env file to add your API keys"
echo "2. Run 'poetry shell' to activate the environment"
echo "3. Open notebooks/day1/01-introduction.org to begin"
echo ""
echo "For more information, see README.org"
#+end_src

** API Configuration

You'll need API keys from various providers for the course exercises:

*** Google AI Studio (Gemini API)

1. Go to [[https://makersuite.google.com/]]
2. Sign in with your Google account
3. Click on "Get API key"
4. Create a new API key
5. Add the key to your .env file:

#+begin_src sh
echo "AI_STUDIO_API_KEY=your-key-here" >> .env
#+end_src

*** Kaggle (Optional)

For datasets and competitions:

1. Go to [[https://www.kaggle.com/]]
2. Create or sign in to your account
3. Go to "Account" → "API"
4. Click "Create New API Token"
5. Add the credentials to your .env file:

#+begin_src sh
echo "KAGGLE_USERNAME=your-username" >> .env
echo "KAGGLE_KEY=your-key" >> .env
#+end_src

*** Optional APIs

For comparing different LLM providers:

#+begin_src sh
# OpenAI
echo "OPENAI_API_KEY=your-key-here" >> .env

# Anthropic
echo "ANTHROPIC_API_KEY=your-key-here" >> .env
#+end_src

** Emacs Configuration

For Org-mode with restclient and Hy support:

*** Install Required Packages

Make sure to have the following Emacs packages installed:

- restclient
- ob-restclient
- hy-mode

*** Project Emacs Config

The project includes an Emacs configuration in .emacs.d/init.el:

#+begin_src emacs-lisp
;; Use M-x package-install to install:
;; - restclient
;; - ob-restclient
;; - hy-mode

;; Add this to your Emacs init file to load the project's Emacs config
;; (add-hook 'find-file-hook
;;           (lambda ()
;;             (when (and buffer-file-name
;;                        (string-match-p "5dgai-intensive" buffer-file-name))
;;               (load-file "/path/to/5dgai-intensive/.emacs.d/init.el"))))
#+end_src

** Day-by-Day Requirements

*** Day 1: Foundations

- Python environment
- Gemini API key
- Basic understanding of Hy syntax

*** Day 2: Prompt Engineering

- Working API setup
- Restclient for API testing
- Completed Day 1 notebook

*** Day 3: Building with the API

- Familiarity with Gemini API parameters
- Understanding of Hy language features
- Poetry environment activated

*** Day 4: Multimodal Applications

- Image generation capabilities
- Understanding of multimodal models
- Additional API keys (optional)

*** Day 5: Production Deployment

- All previous days' material
- Docker (optional for deployment exercises)
- Understanding of environment configuration

** Troubleshooting

*** API Connection Issues

If you're having trouble connecting to the Gemini API:

1. Verify your API key in .env file
2. Check your internet connection
3. Try running the test script:

#+begin_src sh
poetry run python -c "
from src.gemini_client import GeminiClient
try:
    client = GeminiClient()
    response = client.generate_content('Test message')
    print(client.extract_text(response))
    print('API test successful!')
except Exception as e:
    print(f'Error: {e}')
"
#+end_src

*** Hy Language Issues

If you're having trouble with Hy:

1. Verify installation with:

#+begin_src sh
poetry run hy --version
#+end_src

2. If not working, reinstall with:

#+begin_src sh
poetry add hy
#+end_src

3. Test with simple code:

#+begin_src sh
poetry run hy -c "(print \"Hello from Hy!\")"
#+end_src

*** Emacs Integration

If Org-mode execution isn't working:

1. Make sure ob-hy is configured in your Emacs:

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((hy . t)
   (python . t)
   (shell . t)
   (restclient . t)))
#+end_src

2. Check if Hy is in your PATH within Emacs
3. Try evaluating a simple code block to test