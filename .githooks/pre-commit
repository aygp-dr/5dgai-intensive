#!/bin/bash
# Pre-commit hook to enforce project standards and catch sensitive information
# Installed by running: git config core.hooksPath .githooks

set -euo pipefail

echo "Running pre-commit checks..."

# Check for markdown files in root directory
ROOT_MD_FILES=$(git diff --cached --name-only | grep -E "^[^/]+\.md$" || true)
if [ -n "$ROOT_MD_FILES" ]; then
  echo "ERROR: .md files in root directory are not allowed per project standards"
  echo "The following files violate this standard:"
  echo "$ROOT_MD_FILES"
  echo ""
  echo "SOLUTION: Convert to .org format instead as specified in CLAUDE.org"
  echo "For each file, please rename with .org extension and update content to org format."
  exit 1
fi

# Verify no direct edits to generated files
GENERATED_FILES=$(git diff --cached --name-only | grep -E "^src/.*\.py$" | grep -v "__init__.py" || true)
if [ -n "$GENERATED_FILES" ]; then
  echo "WARNING: You are editing Python files that may be generated from org files."
  echo "Consider editing the source .org files instead and tangling."
  echo "Affected files:"
  echo "$GENERATED_FILES"
  echo ""
  echo "Continue anyway? (y/n)"
  read -r response
  if [[ "$response" != "y" ]]; then
    exit 1
  fi
fi

# SECURITY CHECKS: Check for sensitive information in staged files

# Function to check for sensitive information in a file
check_sensitive_info() {
  local file="$1"
  local content=$(git show ":$file")
  
  # === Google API Keys ===
  # Google API key pattern
  if echo "$content" | grep -q -E "AIza[0-9A-Za-z\-_]{35}"; then
    echo "ERROR: Possible Google API key found in $file"
    echo "Please remove the API key and use environment variables instead."
    return 1
  fi
  
  # === AWS Credentials ===
  # AWS Access Key ID
  if echo "$content" | grep -q -E "AKIA[0-9A-Z]{16}"; then
    echo "ERROR: Possible AWS Access Key ID found in $file"
    echo "Please remove the access key and use environment variables instead."
    return 1
  fi
  
  # AWS Secret Access Key
  if echo "$content" | grep -q -E "['\"]([a-zA-Z0-9+/]{40})['\"]"; then
    echo "ERROR: Possible AWS Secret Access Key found in $file"
    echo "Please remove the secret key and use environment variables instead."
    return 1
  fi
  
  # === OpenAI API Keys ===
  if echo "$content" | grep -q -E "['\"]sk-[a-zA-Z0-9]{48}['\"]"; then
    echo "ERROR: Possible OpenAI API key found in $file"
    echo "Please remove the API key and use environment variables instead."
    return 1
  fi
  
  # === Anthropic API Keys ===
  if echo "$content" | grep -q -E "['\"]sk-ant-[a-zA-Z0-9]{32,}['\"]"; then
    echo "ERROR: Possible Anthropic API key found in $file"
    echo "Please remove the API key and use environment variables instead."
    return 1
  fi
  
  # === GitHub Tokens ===
  if echo "$content" | grep -q -E "['\"]gh[pousr]_[0-9a-zA-Z]{36,255}['\"]"; then
    echo "ERROR: Possible GitHub token found in $file"
    echo "Please remove the token and use environment variables instead."
    return 1
  fi
  
  # === Stripe API Keys ===
  if echo "$content" | grep -q -E "['\"]sk_live_[0-9a-zA-Z]{24}['\"]"; then
    echo "ERROR: Possible Stripe API key found in $file"
    echo "Please remove the API key and use environment variables instead."
    return 1
  fi
  
  # === Slack API Tokens ===
  if echo "$content" | grep -q -E "['\"]xox[pbar]-[0-9]{12}-[0-9]{12}-[0-9a-zA-Z]{24}['\"]"; then
    echo "ERROR: Possible Slack API token found in $file"
    echo "Please remove the token and use environment variables instead."
    return 1
  fi
  
  # === Database Connection Strings ===
  # Postgres
  if echo "$content" | grep -q -E "postgresql://[a-zA-Z0-9_]+:[a-zA-Z0-9_]+@[a-zA-Z0-9_.]+:[0-9]+/[a-zA-Z0-9_]+"; then
    echo "ERROR: Possible PostgreSQL connection string found in $file"
    echo "Please remove the connection string and use environment variables instead."
    return 1
  fi
  
  # MongoDB
  if echo "$content" | grep -q -E "mongodb(\+srv)?://[a-zA-Z0-9_]+:[a-zA-Z0-9_]+@[a-zA-Z0-9_.]+"; then
    echo "ERROR: Possible MongoDB connection string found in $file"
    echo "Please remove the connection string and use environment variables instead."
    return 1
  fi
  
  # === API Key Variable Assignments ===
  # Check for patterns like API_KEY="abc123" or apiKey = "abc123"
  if echo "$content" | grep -q -E "(api_?key|api[_-]?token|access[_-]?token|secret[_-]?key|auth[_-]?token)[[:space:]]*=[[:space:]]*['\"][a-zA-Z0-9_\-\.]{8,}['\"]"; then
    echo "ERROR: Possible hardcoded API key or token assignment found in $file"
    echo "Please remove the hardcoded value and use environment variables instead."
    return 1
  fi
  
  # === Generic Secret Patterns ===
  # Look for explicitly named secrets
  if echo "$content" | grep -q -E "(secret|password|credential)[[:space:]]*=[[:space:]]*['\"][a-zA-Z0-9_\-\.]{8,}['\"]"; then
    echo "ERROR: Possible hardcoded secret/password found in $file"
    echo "Please remove the sensitive information and use environment variables instead."
    return 1
  fi
  
  # Look for patterns that might be tokens (long random strings)
  if echo "$content" | grep -q -E "['\"][a-zA-Z0-9_\-]{32,}['\"]"; then
    # Check if this is in a test file or example that might legitimately include a fake token
    if ! echo "$file" | grep -q -E "test|example|mock|fixture"; then
      echo "WARNING: Possible token or secret found in $file"
      echo "Please verify this isn't a real secret. If it is, remove it and use environment variables instead."
      # Not returning 1 here to avoid false positives, just warning
    fi
  fi
  
  # No sensitive information detected
  return 0
}

# Loop through all staged files
STAGED_FILES=$(git diff --cached --name-only)
FOUND_SENSITIVE_INFO=0

echo "Checking for sensitive information..."
for file in $STAGED_FILES; do
  # Skip binary files, they can cause false positives
  if git diff --cached --name-only -z "$file" | xargs -0 file | grep -q "text"; then
    if ! check_sensitive_info "$file"; then
      FOUND_SENSITIVE_INFO=1
    fi
  fi
done

if [ $FOUND_SENSITIVE_INFO -eq 1 ]; then
  echo "ERROR: Sensitive information found in staged files. Commit aborted."
  echo "Please fix the issues above and try again."
  echo ""
  echo "Tips for handling sensitive information:"
  echo "1. Use environment variables instead of hardcoding secrets"
  echo "2. Consider using .env files (add to .gitignore)"
  echo "3. For testing, use placeholder values like 'APIKEY_PLACEHOLDER'"
  exit 1
fi

# All checks passed
echo "Pre-commit checks passed."
exit 0