* Google AI Studio API Testing
:PROPERTIES:
:header-args: :tangle api/gemini.http
:END:

#+begin_src restclient
# Test Google AI Gemini API
# Replace YOUR_API_KEY with your actual API key or use environment variable

# Variables
:base_url = https://generativelanguage.googleapis.com/v1beta
:model = gemini-2.0-flash

### Basic content generation
POST :base_url/models/:model:generateContent?key={{AI_STUDIO_API_KEY}}
Content-Type: application/json

{
  "contents": [{
    "parts":[{"text": "Explain how AI works"}]
  }]
}

### Generate content with system instruction
POST :base_url/models/:model:generateContent?key={{AI_STUDIO_API_KEY}}
Content-Type: application/json

{
  "contents": [
    {
      "role": "user",
      "parts": [{"text": "Write a haiku about machine learning"}]
    }
  ],
  "systemInstruction": {
    "parts": [
      {
        "text": "You are a creative writing assistant that specializes in haiku poetry."
      }
    ]
  }
}

### Multi-turn conversation
POST :base_url/models/:model:generateContent?key={{AI_STUDIO_API_KEY}}
Content-Type: application/json

{
  "contents": [
    {
      "role": "user",
      "parts": [{"text": "What are good resources for learning about neural networks?"}]
    },
    {
      "role": "model",
      "parts": [{"text": "There are many excellent resources for learning about neural networks! Here are some I recommend:\n\n1. **Books**:\n   - \"Deep Learning\" by Ian Goodfellow, Yoshua Bengio, and Aaron Courville\n   - \"Neural Networks and Deep Learning\" by Michael Nielsen (free online)\n   - \"Grokking Deep Learning\" by Andrew Trask\n\n2. **Online Courses**:\n   - Andrew Ng's Deep Learning Specialization on Coursera\n   - Fast.ai's Practical Deep Learning for Coders\n   - Stanford's CS231n (Convolutional Neural Networks)\n\n3. **Tutorials and Blogs**:\n   - TensorFlow and PyTorch tutorials\n   - Distill.pub for visualizations and explanations\n   - Towards Data Science articles on Medium\n\n4. **Videos**:\n   - 3Blue1Brown's neural network series on YouTube\n   - Lex Fridman's deep learning lectures from MIT\n\nIs there any specific aspect of neural networks you're interested in?"}]
    },
    {
      "role": "user",
      "parts": [{"text": "I'm specifically interested in computer vision applications"}]
    }
  ]
}
#+end_src

* Discord Integration
:PROPERTIES:
:header-args: :tangle discord.md
:END:

#+begin_src markdown
# Discord Server for 5-Day Gen AI Intensive

The course uses Discord for communication, questions, and community interaction.

## Server Information
- **Server Name**: Kaggle
- **Link**: https://discord.com/channels/1101210829807956100/
- **Status**: Successfully joined and completed onboarding

## Important Channels
- **#5dgai-announcements**: Official course announcements and updates
- **#5dgai-introductions**: Introduce yourself to other participants
- **#5dgai-question-forum**: Ask questions about course content
- **#5dgai-general-chat**: General discussion about the course

## Tips for Discord Use
1. **Set up notifications**: Configure your notification settings to ensure you don't miss important announcements
2. **Search before asking**: Use Discord's search functionality to see if your question has already been answered
3. **Use threads**: For longer discussions, create threads to keep the channels organized
4. **Share your work**: Consider sharing your progress in appropriate channels
5. **Be respectful**: Follow community guidelines and be respectful to other participants

## Introducing Yourself
When introducing yourself in the #5dgai-introductions channel, consider including:
- Your name
- Your background (technical/non-technical)
- Your experience with AI/ML
- What you hope to learn from the course
- Any specific areas of interest in Gen AI

## Helpful Discord Commands
- `/search [term]`: Search for messages containing specific terms
- `/thread`: Create a new thread from a message
- `/giphy`: Add GIFs to your messages
- `/poll`: Create a simple poll
#+end_src

* Account Setup Tasks
:PROPERTIES:
:header-args: :tangle tasks.md
:END:

#+begin_src markdown
# 5-Day Gen AI Intensive Setup Tasks

## Kaggle Setup
**Status: IN PROGRESS**

1. [x] Create Kaggle account at https://kaggle.com
2. [ ] Verify phone number in account settings
3. [ ] Generate API token for programmatic access:
   - Go to Account > API > Create New API Token
   - Save kaggle.json file to ~/.kaggle/ directory
   - Set permissions: `chmod 600 ~/.kaggle/kaggle.json`
4. [ ] Join the 5-Day Gen AI Intensive competition page
5. [ ] Verify you can access course notebooks and resources

## Google AI Studio Setup
**Status: IN PROGRESS**

1. [ ] Create AI Studio account at https://aistudio.google.com
2. [ ] Set up API access:
   - Go to API Keys > Create API Key
   - Copy key to secure location
   - Add to .env or .envrc file
3. [ ] Try running a sample prompt in the interface
4. [ ] Verify API access using the gemini.http REST client file
#+end_src

## Discord-Kaggle Account Linking
**Status: IN PROGRESS**

To fully participate in all Kaggle Discord channels, your Kaggle account needs to be linked to Discord:

1. Visit: https://kaggle.com/discord/confirmation
2. Review the permissions:
   - Discord will be able to access:
     - Your Kaggle username and display name
     - Your progression tier
     - Your signup date
   - Discord will NOT have access to your Kaggle password
   - You can revoke access anytime in Kaggle Account Settings
3. Click "Link your account to Discord"
4. Verify the connection by checking access to additional Discord channels

Note: This step can only be completed after your Kaggle phone verification is successful, as the account linking requires a verified Kaggle account.

Benefits of linking:
- Access to all channels in the Kaggle Discord server
- Ability to participate in community discussions beyond the course-specific channels
- Your Kaggle achievements/progression will be visible in Discord

* API Demo
:PROPERTIES:
:header-args: :tangle notebooks/api_demo.org
:END:

#+begin_src org
#+TITLE: Google AI Studio API Demo
#+AUTHOR: Jason Walsh
#+DATE: March 30, 2025

* Introduction

This notebook demonstrates how to use the Google AI Studio API (Gemini) from within Org-mode.

* Setup

Let's first set up our environment:

#+begin_src python :results output
import os
import sys
import json
import requests
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Check if we have an API key
api_key = os.environ.get("AI_STUDIO_API_KEY")
if not api_key:
    print("⚠️ No API key found! Set the AI_STUDIO_API_KEY environment variable.")
else:
    print("✓ API key found. Ready to use Gemini API.")
#+end_src

* Basic API Call using RESTClient

We can make API calls using Org-mode's RESTClient integration:

#+begin_src restclient :exports both
POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={{AI_STUDIO_API_KEY}}
Content-Type: application/json

{
  "contents": [{
    "parts":[{"text": "Tell me a short joke about AI"}]
  }]
}
#+end_src

* API Call with Python

Alternatively, we can use Python for more control:

#+begin_src python :results output
import requests
import json
import os

api_key = os.environ.get("AI_STUDIO_API_KEY")
url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"

payload = {
  "contents": [{
    "parts":[{"text": "What are 3 ways AI can help with education?"}]
  }]
}

headers = {
  "Content-Type": "application/json"
}

response = requests.post(url, headers=headers, json=payload)
response_json = response.json()

try:
    text = response_json['candidates'][0]['content']['parts'][0]['text']
    print(text)
except (KeyError, IndexError):
    print("Error extracting response:", json.dumps(response_json, indent=2))
#+end_src

* Conclusion

This demo shows how to integrate Gemini API calls into your Org-mode workflow. Use these techniques throughout the 5-Day Gen AI Intensive course.
#+end_src

* Emacs Configuration
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src emacs-lisp
;; Basic configuration for 5-Day Gen AI Intensive course
;; Load necessary packages for API testing, org-mode, and code editing

;; Package setup
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Install use-package if not already installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

;; Install and configure essential packages
(use-package org
  :config
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)
     (restclient . t)
     (http . t))))

;; RESTClient for API testing#+TITLE: 5-Day Gen AI Intensive Setup
#+AUTHOR: Jason Walsh
#+EMAIL: j@wal.sh
#+DATE: March 30, 2025
#+PROPERTY: header-args :mkdirp yes

* Overview

This repository contains setup code for the Google 5-Day Gen AI Intensive course running from March 31 to April 4, 2025.

* Environment Setup
:PROPERTIES:
:header-args: :tangle setup.sh :shebang "#!/bin/bash"
:END:

#+begin_src sh
# Initialize directory structure and environment for 5-Day Gen AI Intensive
set -euo pipefail

echo "Setting up environment for 5-Day Gen AI Intensive course..."

# Create directory structure
mkdir -p notebooks/{day1,day2,day3,day4,day5}
mkdir -p papers/{day1,day2,day3,day4,day5}
mkdir -p podcasts resources src templates api config capstone

# Initialize Python environment using Poetry
if command -v poetry > /dev/null; then
    echo "Setting up Poetry environment..."
    poetry init \
        --name "gen-ai-intensive" \
        --description "Google's 5-Day Gen AI Intensive Course" \
        --author "Jason Walsh <j@wal.sh>" \
        --python "^3.11"
    
    poetry add \
        numpy pandas matplotlib seaborn scikit-learn \
        tensorflow torch transformers datasets \
        langchain langchain-openai llama-index openai anthropic google-generativeai \
        jupyter ipykernel ipywidgets kaggle \
        plotly gradio python-dotenv requests tqdm

    echo "Poetry environment setup complete"
else
    echo "Poetry not found, please install it or use the requirements.txt file"
fi

# Create a basic .envrc file template
mkdir -p config
cat > config/.envrc.template << 'EOF'
# Environment variables for 5-Day Gen AI Intensive
# Copy this file to .envrc and fill in your values

# API Keys
export AI_STUDIO_API_KEY=""
export KAGGLE_USERNAME=""
export KAGGLE_KEY=""
export OPENAI_API_KEY=""
export ANTHROPIC_API_KEY=""

# Google Cloud (optional)
export GOOGLE_CLOUD_PROJECT=""
export COMPUTE_REGION="us-central1"

# Pythonpath for project
export PYTHONPATH="$PYTHONPATH:$(pwd)"
EOF

echo "Environment setup complete!"
echo "Next steps:"
echo "1. Run 'poetry install' to set up the virtual environment"
echo "2. Run 'poetry shell' to activate the environment"
echo "3. Copy config/.envrc.template to .envrc and add your API credentials"
echo "4. Run 'direnv allow' to load the environment variables (if using direnv)"
#+end_src

* Python Project Configuration
:PROPERTIES:
:header-args: :tangle pyproject.toml
:END:

#+begin_src toml
[tool.poetry]
name = "gen-ai-intensive"
version = "0.1.0"
description = "Resources for Google's 5-Day Gen AI Intensive course"
authors = ["Jason Walsh <j@wal.sh>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
numpy = "^1.26.4"
pandas = "^2.2.1"
matplotlib = "^3.8.3"
seaborn = "^0.13.2"
scikit-learn = "^1.4.1"
tensorflow = "^2.15.0"
torch = "^2.2.1"
transformers = "^4.38.2"
datasets = "^2.17.1"
langchain = "^0.1.12"
langchain-openai = "^0.0.6"
llama-index = "^0.10.12"
openai = "^1.13.3"
anthropic = "^0.9.0"
google-generativeai = "^0.3.2"
jupyter = "^1.0.0"
ipykernel = "^6.27.1"
ipywidgets = "^8.1.2"
kaggle = "^1.5.16"
plotly = "^5.18.0"
gradio = "^4.19.2"
python-dotenv = "^1.0.1"
requests = "^2.31.0"
tqdm = "^4.66.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
#+end_src

* Docker Configuration
:PROPERTIES:
:header-args: :tangle Dockerfile
:END:

#+begin_src dockerfile
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    emacs \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 -
ENV PATH="/root/.local/bin:$PATH"

# Copy poetry configuration files
COPY pyproject.toml poetry.lock* ./

# Configure poetry to not create a virtual environment inside the container
RUN poetry config virtualenvs.create false

# Install dependencies
RUN poetry install --no-dev --no-interaction --no-ansi

# Copy project files
COPY . .

# Install jupytext for notebook conversion
RUN pip install jupytext

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Expose port for Jupyter
EXPOSE 8888

# Start Jupyter by default
CMD ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=''", "--NotebookApp.password=''"]
#+end_src

* Docker Compose Configuration
:PROPERTIES:
:header-args: :tangle docker-compose.yml
:END:

#+begin_src yaml
version: '3'

services:
  notebook:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m src.api
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      - notebook

  org-emacs:
    build:
      context: .
      dockerfile: Dockerfile
    command: emacs -Q --daemon
    volumes:
      - .:/app
      - ./init.el:/root/.emacs.d/init.el
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
#+end_src

* Project Structure Diagram
:PROPERTIES:
:header-args: :tangle project_structure.md
:END:

#+begin_src markdown
# Project Structure

```mermaid
C4Context
  title 5-Day Gen AI Intensive - Project Structure

  Enterprise_Boundary(b0, "5-Day Gen AI Intensive") {
    System(notebooks, "Notebooks", "Jupyter notebooks for daily exercises")
    System(papers, "Papers", "Research papers and references")
    System(src, "Source Code", "Python modules and utilities")
    System(api, "API", "API service for model endpoints")
    System(config, "Config", "Configuration files and templates")
    System(podcasts, "Podcasts", "Audio content and notes")
    
    Boundary(infra, "Infrastructure") {
      System_Ext(docker, "Docker", "Containerized environment")
      System_Ext(poetry, "Poetry", "Python dependency management")
    }
    
    Boundary(resources, "Resources") {
      System_Ext(kaggle, "Kaggle", "Competition platform")
      System_Ext(aiStudio, "Google AI Studio", "Model APIs")
      System_Ext(discord, "Discord", "Community discussions")
    }
    
    BiRel(notebooks, src, "Uses")
    Rel(notebooks, papers, "References")
    Rel(src, api, "Implements")
    Rel(src, config, "Uses configuration from")
    Rel(infra, notebooks, "Hosts")
    Rel(infra, api, "Runs")
    Rel(notebooks, resources, "Connects to")
    Rel(api, resources, "Integrates with")
    Rel(podcasts, notebooks, "Provides content for")
  }
```
#+end_src

* API Integration Utility
:PROPERTIES:
:header-args: :tangle src/gemini_client.py
:END:

#+begin_src python
"""
Google AI Gemini API Client

This script provides utilities for interacting with the Google AI Gemini API.
"""

import os
import json
import requests
from dotenv import load_dotenv
from typing import Dict, List, Any, Optional

# Load environment variables
load_dotenv()

class GeminiClient:
    """Client for interacting with Google's Gemini API."""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialize the Gemini client.
        
        Args:
            api_key: Google AI Studio API key. If None, will try to load from environment.
        """
        self.api_key = api_key or os.environ.get("AI_STUDIO_API_KEY")
        if not self.api_key:
            raise ValueError("No API key provided. Set AI_STUDIO_API_KEY environment variable or pass as parameter.")
        
        self.base_url = "https://generativelanguage.googleapis.com/v1beta"
    
    def generate_content(self, 
                         prompt: str, 
                         model: str = "gemini-2.0-flash",
                         system_instruction: Optional[str] = None) -> Dict[str, Any]:
        """
        Generate content using Gemini API.
        
        Args:
            prompt: The text prompt to send
            model: The model to use (default: gemini-2.0-flash)
            system_instruction: Optional system instruction
            
        Returns:
            Dict containing the API response
        """
        url = f"{self.base_url}/models/{model}:generateContent?key={self.api_key}"
        
        payload = {
            "contents": [{
                "parts": [{"text": prompt}]
            }]
        }
        
        if system_instruction:
            payload["systemInstruction"] = {
                "parts": [{"text": system_instruction}]
            }
        
        headers = {
            "Content-Type": "application/json"
        }
        
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        
        return response.json()
    
    def chat(self, 
             messages: List[Dict[str, Any]], 
             model: str = "gemini-2.0-flash",
             system_instruction: Optional[str] = None) -> Dict[str, Any]:
        """
        Have a chat conversation using Gemini API.
        
        Args:
            messages: List of message dictionaries with 'role' and 'content'
            model: The model to use (default: gemini-2.0-flash)
            system_instruction: Optional system instruction
            
        Returns:
            Dict containing the API response
        """
        url = f"{self.base_url}/models/{model}:generateContent?key={self.api_key}"
        
        # Format messages for Gemini API
        contents = []
        for msg in messages:
            content = {
                "role": msg["role"],
                "parts": [{"text": msg["content"]}]
            }
            contents.append(content)
        
        payload = {
            "contents": contents
        }
        
        if system_instruction:
            payload["systemInstruction"] = {
                "parts": [{"text": system_instruction}]
            }
        
        headers = {
            "Content-Type": "application/json"
        }
        
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        
        return response.json()
    
    def extract_text(self, response: Dict[str, Any]) -> str:
        """
        Extract text content from API response.
        
        Args:
            response: The API response dictionary
            
        Returns:
            Extracted text content
        """
        try:
            return response['candidates'][0]['content']['parts'][0]['text']
        except (KeyError, IndexError):
            return "No text content found in response"


if __name__ == "__main__":
    # Example usage
    client = GeminiClient()
    
    # Simple prompt
    response = client.generate_content("Explain how AI works in 3 sentences.")
    print("Response:", client.extract_text(response))
    
    # Chat conversation
    chat_messages = [
        {"role": "user", "content": "What are three benefits of using generative AI?"},
        {"role": "model", "content": "1. Enhanced creativity and idea generation\n2. Automation of content creation\n3. Personalization of user experiences"},
        {"role": "user", "content": "Can you elaborate on the third point?"}
    ]
    
    chat_response = client.chat(chat_messages)
    print("\nChat Response:", client.extract_text(chat_response))
#+end_src
